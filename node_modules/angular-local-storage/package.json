{
  "name": "angular-local-storage",
  "version": "0.2.3",
  "description": "An Angular module that gives you access to the browsers local storage",
  "homepage": "https://github.com/grevory/angular-local-storage",
  "main": "./dist/angular-local-storage.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/grevory/angular-local-storage.git"
  },
  "keywords": [
    "AngularJS",
    "local",
    "storage"
  ],
  "author": {
    "name": "grevory",
    "email": "greg@gregpike.ca"
  },
  "contributors": [
    {
      "name": "Ariel Mashraki",
      "email": "ariel@mashraki.co.il"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/grevory/angular-local-storage/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.9",
    "grunt-contrib-concat": "*",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-uglify": "*",
    "grunt-karma": "latest",
    "karma": "~0.12.16",
    "karma-jasmine": "~0.1.5",
    "karma-coverage": "^0.2.6",
    "karma-phantomjs-launcher": "~0.1.4",
    "load-grunt-tasks": "~0.3.0",
    "time-grunt": "~0.2.9"
  },
  "readme": "angular-local-storage\r\n=====================\r\nAn Angular module that gives you access to the browsers local storage, **v0.2.1**\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Test coverage][coveralls-image]][coveralls-url]\r\n[![Dependency Status][david-image]][david-url]\r\n[![License][license-image]][license-url]\r\n[![Downloads][downloads-image]][downloads-url]\r\n\r\n##Table of contents:\r\n- [![Gitter][gitter-image]][gitter-url]\r\n- [Get Started](#get-started)\r\n- [Video Tutorial](https://www.youtube.com/watch?v=I4iB0kOSmx8)\r\n- [Development](#development)\r\n- [Configuration](#configuration)\r\n - [setPrefix](#setprefix)\r\n - [setStorageType](#setstoragetype)\r\n - [setStorageCookie](#setstoragecookie)\r\n - [setStorageCookieDomain](#setstoragecookiedomain)\r\n - [setNotify](#setnotify)\r\n - [Example](#configuration-example)\r\n- [API Documentation](#api-documentation)\r\n - [isSupported](#issupported)\r\n - [getStorageType](#getstoragetype)\r\n - [set](#set)\r\n - [get](#get)\r\n - [keys](#keys)\r\n - [remove](#remove)\r\n - [clearAll](#clearall)\r\n - [bind](#bind)\r\n - [deriveKey](#derivekey)\r\n - [length](#length)\r\n - [cookie](#cookie)\r\n    - [isSupported](#cookieissupported)\r\n    - [set](#cookieset)\r\n    - [get](#cookieget)\r\n    - [remove](#cookieremove)\r\n    - [clearAll](#cookieclearall)\r\n\r\n##Get Started\r\n**(1)** You can install angular-local-storage using 2 different ways:<br/>\r\n**Git:**\r\nclone & build [this](https://github.com/grevory/angular-local-storage.git) repository<br/>\r\n**Bower:**\r\n```bash\r\n$ bower install angular-local-storage --save\r\n```\r\n**npm:**\r\n```bash\r\n$ npm install angular-local-storage\r\n```\r\n**(2)** Include `angular-local-storage.js` (or `angular-local-storage.min.js`) from the [dist](https://github.com/grevory/angular-local-storage/tree/master/dist) directory in your `index.html`, after including Angular itself.\r\n\r\n**(3)** Add `'LocalStorageModule'` to your main module's list of dependencies.\r\n\r\nWhen you're done, your setup should look similar to the following:\r\n\r\n```html\r\n<!doctype html>\r\n<html ng-app=\"myApp\">\r\n<head>\r\n   \r\n</head>\r\n<body>\r\n    ...\r\n    <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js\"></script>\r\n    <script src=\"bower_components/js/angular-local-storage.min.js\"></script>\r\n    ...\r\n    <script>\r\n        var myApp = angular.module('myApp', ['LocalStorageModule']);\r\n\r\n    </script>\r\n    ...\r\n</body>\r\n</html>\r\n```\r\n##Configuration\r\n###setPrefix\r\nYou could set a prefix to avoid overwriting any local storage variables from the rest of your app<br/>\r\n**Default prefix:** `ls.<your-key>`\r\n```js\r\nmyApp.config(function (localStorageServiceProvider) {\r\n  localStorageServiceProvider\r\n    .setPrefix('yourAppName');\r\n});\r\n```\r\n###setStorageType\r\nYou could change web storage type to localStorage or sessionStorage<br/>\r\n**Default storage:** `localStorage`\r\n```js\r\nmyApp.config(function (localStorageServiceProvider) {\r\n  localStorageServiceProvider\r\n    .setStorageType('sessionStorage');\r\n});\r\n```\r\n###setStorageCookie\r\nSet cookie options (usually in case of fallback)<br/>\r\n**expiry:** number of days before cookies expire (0 = does not expire). **default:** `30`<br/>\r\n**path:** the web path the cookie represents. **default:** `'/'`\r\n```js\r\nmyApp.config(function (localStorageServiceProvider) {\r\n  localStorageServiceProvider\r\n    .setStorageCookie(45, '<path>');\r\n});\r\n```\r\n###setStorageCookieDomain\r\nSet the cookie domain, since this runs inside a the `config()` block, only providers and constants can be injected.  As a result, `$location` service can't be used here, use a hardcoded string or `window.location`.<br/>\r\n**No default value**\r\n```js\r\nmyApp.config(function (localStorageServiceProvider) {\r\n  localStorageServiceProvider\r\n    .setStorageCookieDomain('<domain>');\r\n});\r\n```\r\n\r\nFor local testing (when you are testing on localhost) set the domain to an empty string ''. Setting the domain to 'localhost' will not work on all browsers (eg. Chrome) since some browsers only allow you to set domain cookies for registry controlled domains, i.e. something ending in .com or so, but not IPs **or intranet hostnames** like localhost. </br>\r\n\r\n###setNotify\r\nSend signals for each of the following actions:<br/>\r\n**setItem** , default: `true`<br/>\r\n**removeItem** , default: `false`\r\n```js\r\nmyApp.config(function (localStorageServiceProvider) {\r\n  localStorageServiceProvider\r\n    .setNotify(true, true);\r\n});\r\n```\r\n###Configuration Example\r\nUsing all together\r\n```js\r\nmyApp.config(function (localStorageServiceProvider) {\r\n  localStorageServiceProvider\r\n    .setPrefix('myApp')\r\n    .setStorageType('sessionStorage')\r\n    .setNotify(true, true)\r\n});\r\n```\r\n##API Documentation\r\n##isSupported\r\nChecks if the browser support the current storage type(e.g: `localStorage`, `sessionStorage`).  \r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  if(localStorageService.isSupported) {\r\n    //...\r\n  }\r\n  //...\r\n});\r\n```\r\n###getStorageType\r\n**Returns:** `String`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  var storageType = localStorageService.getStorageType(); //e.g localStorage\r\n  //...\r\n});\r\n```\r\n###set\r\nDirectly adds a value to local storage.<br/>\r\nIf local storage is not supported, use cookies instead.<br/>\r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function submit(key, val) {\r\n   return localStorageService.set(key, val);\r\n  }\r\n  //...\r\n});\r\n```\r\n###get\r\nDirectly get a value from local storage.<br/>\r\nIf local storage is not supported, use cookies instead.<br/>\r\n**Returns:** `value from local storage`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function getItem(key) {\r\n   return localStorageService.get(key);\r\n  }\r\n  //...\r\n});\r\n```\r\n###keys\r\nReturn array of keys for local storage, ignore keys that not owned.<br/>\r\n**Returns:** `value from local storage`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  var lsKeys = localStorageService.keys();\r\n  //...\r\n});\r\n```\r\n###remove\r\nRemove an item(s) from local storage by key.<br/>\r\nIf local storage is not supported, use cookies instead.<br/>\r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function removeItem(key) {\r\n   return localStorageService.remove(key);\r\n  }\r\n  //...\r\n  function removeItems(key1, key2, key3) {\r\n   return localStorageService.remove(key1, key2, key3);\r\n  }\r\n});\r\n```\r\n###clearAll\r\nRemove all data for this app from local storage.<br/>\r\nIf local storage is not supported, use cookies instead.<br/>\r\n**Note:** Optionally takes a regular expression string and removes matching.<br/>\r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function clearNumbers(key) {\r\n   return localStorageService.clearAll(/^\\d+$/);\r\n  }\r\n  //...\r\n  function clearAll() {\r\n   return localStorageService.clearAll();\r\n  }\r\n});\r\n```\r\n###bind\r\nBind $scope key to localStorageService.  \r\n**Usage:** `localStorageService.bind(scope, property, value[optional], key[optional])`  \r\n***key:*** The corresponding key used in local storage  \r\n**Returns:** deregistration function for this listener.\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  localStorageService.set('property', 'oldValue');\r\n  $scope.unbind = localStorageService.bind($scope, 'property');\r\n  \r\n  //Test Changes\r\n  $scope.update = function(val) {\r\n    $scope.property = val;\r\n    $timeout(function() {\r\n      alert(\"localStorage value: \" + localStorageService.get('property'));\r\n    });\r\n  }\r\n  //...\r\n});\r\n```\r\n```html\r\n<div ng-controller=\"MainCtrl\">\r\n  <p>{{property}}</p>\r\n  <input type=\"text\" ng-model=\"lsValue\"/>\r\n  <button ng-click=\"update(lsValue)\">update</button>\r\n  <button ng-click=\"unbind()\">unbind</button>\r\n</div>\r\n```\r\n\r\n###deriveKey\r\nReturn the derive key  \r\n**Returns** `String`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  localStorageService.set('property', 'oldValue');\r\n  //Test Result\r\n  console.log(localStorageService.deriveKey('property')); // ls.property\r\n  //...\r\n});\r\n```\r\n###length\r\nReturn localStorageService.length, ignore keys that not owned.  \r\n**Returns** `Number`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  var lsLength = localStorageService.length(); // e.g: 7\r\n  //...\r\n});\r\n```\r\n##Cookie\r\nDeal with browser's cookies directly.\r\n##cookie.isSupported\r\nChecks if cookies are enabled in the browser.  \r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  if(localStorageService.cookie.isSupported) {\r\n    //...\r\n  }\r\n  //...\r\n});\r\n```\r\n###cookie.set\r\nDirectly adds a value to cookies.<br/>\r\n**Note:** Typically used as a fallback if local storage is not supported.<br/>\r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function submit(key, val) {\r\n   return localStorageService.cookie.set(key, val);\r\n  }\r\n  //...\r\n});\r\n```\r\n**Cookie Expiry** Pass a third argument to specify number of days to expiry\r\n```js\r\n    localStorageService.cookie.set(key,val,10)\r\n```\r\nsets a cookie that expires in 10 days.\r\n###cookie.get\r\nDirectly get a value from a cookie.<br/>\r\n**Returns:** `value from local storage`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function getItem(key) {\r\n   return localStorageService.cookie.get(key);\r\n  }\r\n  //...\r\n});\r\n```\r\n###cookie.remove\r\nRemove directly value from a cookie.<br/>\r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function removeItem(key) {\r\n   return localStorageService.cookie.remove(key);\r\n  }\r\n  //...\r\n});\r\n```\r\n###cookie.clearAll\r\nRemove all data for this app from cookie.<br/>\r\n**Returns:** `Boolean`\r\n```js\r\nmyApp.controller('MainCtrl', function($scope, localStorageService) {\r\n  //...\r\n  function clearAll() {\r\n   return localStorageService.cookie.clearAll();\r\n  }\r\n});\r\n```\r\n\r\nCheck out the full demo at http://gregpike.net/demos/angular-local-storage/demo.html\r\n\r\n##Development:\r\n* Don't forget about tests.\r\n* If you planning add some feature please create issue before.\r\n\r\nClone the project: \r\n```sh\r\n$ git clone https://github.com/<your-repo>/angular-local-storage.git\r\n$ npm install\r\n$ bower install\r\n```\r\nRun the tests:\r\n```sh\r\n$ grunt test\r\n```\r\n**Deploy:**<br/>\r\nRun the build task, update version before(bower,package)\r\n```sh\r\n$ grunt dist\r\n$ git tag 0.*.*\r\n$ git push origin master --tags\r\n```\r\n\r\n[npm-image]: https://img.shields.io/npm/v/angular-local-storage.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/angular-local-storage\r\n[travis-image]: https://img.shields.io/travis/grevory/angular-local-storage.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/grevory/angular-local-storage\r\n[coveralls-image]: https://img.shields.io/coveralls/grevory/angular-local-storage.svg?style=flat-square\r\n[coveralls-url]: https://coveralls.io/r/grevory/angular-local-storage\r\n[david-image]: http://img.shields.io/david/grevory/angular-local-storage.svg?style=flat-square\r\n[david-url]: https://david-dm.org/grevory/angular-local-storage\r\n[license-image]: http://img.shields.io/npm/l/angular-local-storage.svg?style=flat-square\r\n[license-url]: LICENSE\r\n[downloads-image]: http://img.shields.io/npm/dm/angular-local-storage.svg?style=flat-square\r\n[downloads-url]: https://npmjs.org/package/angular-local-storage\r\n[gitter-image]: https://badges.gitter.im/Join%20Chat.svg\r\n[gitter-url]: https://gitter.im/grevory/angular-local-storage?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n",
  "readmeFilename": "README.md",
  "gitHead": "ff233e43be10f55adc56b27a9cad0f42f3fd5675",
  "_id": "angular-local-storage@0.2.3",
  "_shasum": "e33d202e2d9ba7c0cdb5d950e8db262c43521ec9",
  "_from": "angular-local-storage",
  "_resolved": "file:angular-local-storage"
}
